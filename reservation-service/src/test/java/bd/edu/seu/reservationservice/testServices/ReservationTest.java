package bd.edu.seu.reservationservice.testServices;import bd.edu.seu.reservationservice.exception.ResourceAlreadyExistsException;import bd.edu.seu.reservationservice.exception.ResourceNotExistsException;import bd.edu.seu.reservationservice.model.Reservation;import bd.edu.seu.reservationservice.model.Room;import bd.edu.seu.reservationservice.model.RoomType;import bd.edu.seu.reservationservice.service.ReservationService;import bd.edu.seu.reservationservice.service.RoomService;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import java.time.LocalDate;import java.util.ArrayList;import java.util.Arrays;import java.util.List;@SpringBootTestpublic class ReservationTest {    @Autowired    private ReservationService reservationService;    @Autowired    private RoomService roomService;    @AfterEach    public void deletAll(){        reservationService.deleteAll();        roomService.deleteAll();    }    @Test    public void saveReservation(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.SINGLE);        Reservation reservation = new Reservation();        reservation.setId(1);        reservation.setName("Joniyed");        reservation.setFromDate(LocalDate.now());        reservation.setToDate(LocalDate.now());        reservation.setRoom(room);        try {            Room saveRoom = roomService.saveRoom(room);            reservationService.saveReservation(reservation);            Reservation reservation1 = reservationService.findById(1);            Assertions.assertEquals(reservation.getName(),reservation1.getName());            Assertions.assertEquals(reservation.getFromDate(),reservation1.getFromDate());            Assertions.assertEquals(reservation.getToDate(),reservation1.getToDate());            Assertions.assertEquals(reservation.getRoom(),reservation1.getRoom());            System.out.println(reservation1);        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }    @Test    public void findAll(){        List<Reservation> reservationList = new ArrayList<>();        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.SINGLE);        try {            Room saveRoom = roomService.saveRoom(room);        } catch (ResourceAlreadyExistsException e) {            e.printStackTrace();        }        Reservation reservation = new Reservation();        reservation.setId(1);        reservation.setName("Joniyed");        reservation.setFromDate(LocalDate.now());        reservation.setToDate(LocalDate.now());        reservation.setRoom((room));        try {            Reservation saveReservation = reservationService.saveReservation(reservation);        } catch (ResourceAlreadyExistsException e) {            e.printStackTrace();        }        reservationService.findAll().forEach(reservationList::add);        reservationList.forEach(System.out::println);    }    @Test    public void findById(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.SUIT);        try {            Room saveRoom = roomService.saveRoom(room);        } catch (ResourceAlreadyExistsException e) {            e.printStackTrace();        }        Reservation reservation = new Reservation();        reservation.setId(1);        reservation.setName("Joniyed");        reservation.setFromDate(LocalDate.now());        reservation.setToDate(LocalDate.now());        reservation.setRoom(room);        try {            Reservation saveReservation = reservationService.saveReservation(reservation);            Reservation reservationbyid = reservationService.findById(1);            Assertions.assertEquals(saveReservation.getName(),reservationbyid.getName());            Assertions.assertEquals(saveReservation.getFromDate(),reservationbyid.getFromDate());            Assertions.assertEquals(saveReservation.getToDate(),reservationbyid.getToDate());            Assertions.assertEquals(reservation.getRoom(),reservationbyid.getRoom());            System.out.println(reservationbyid);        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }    @Test    public void deleteByIdTest(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.SINGLE);        Reservation reservation = new Reservation();        reservation.setId(1);        reservation.setName("Joniyed");        reservation.setFromDate(LocalDate.now());        reservation.setToDate(LocalDate.now());        reservation.setRoom(room);        Reservation reservation1=new Reservation();        try {            Room saveRoom = roomService.saveRoom(room);            Reservation saveReservation = reservationService.saveReservation(reservation);            System.out.println(saveReservation);            reservationService.deleteById(1);            List<Reservation> reservationList = new ArrayList<>();            reservationService.findAll().forEach(reservationList::add);            System.out.println("After delete reservation 1");            System.out.println(reservationList);        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }    @Test    public void updateReservationTest(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.SINGLE);        Reservation reservation = new Reservation();        reservation.setId(1);        reservation.setName("Joniyed");        reservation.setFromDate(LocalDate.now());        reservation.setToDate(LocalDate.now());        reservation.setRoom(room);        try {            Room saveRoom = roomService.saveRoom(room);            Reservation saveReservation = reservationService.saveReservation(reservation);            System.out.println(reservation);            reservation.setName("Nahidul islam");            Reservation updateReservation = reservationService.updateReservation(1, reservation);            Assertions.assertEquals(reservation.getName(),updateReservation.getName());            System.out.println(updateReservation);        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }}
package bd.edu.seu.reservationservice.testServices;import bd.edu.seu.reservationservice.exception.ResourceAlreadyExistsException;import bd.edu.seu.reservationservice.exception.ResourceNotExistsException;import bd.edu.seu.reservationservice.model.Room;import bd.edu.seu.reservationservice.model.RoomType;import bd.edu.seu.reservationservice.service.RoomService;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestpublic class RoomServiceTest {    @Autowired    private RoomService roomService;    @AfterEach    public void deleteAll(){        roomService.deleteAll();    }    @Test    public void saveTest(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.DOUBLE);        try {            Room saveRoom = roomService.saveRoom(room);            System.out.println(saveRoom);            Assertions.assertEquals(room.getId(),saveRoom.getId());            Assertions.assertEquals(room.getNumber(),saveRoom.getNumber());            Assertions.assertEquals(room.getRoomType(),saveRoom.getRoomType());        } catch (ResourceAlreadyExistsException e) {            e.printStackTrace();        }    }    @Test    public void findAllTest(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.DOUBLE);        try {            roomService.saveRoom(room);        } catch (ResourceAlreadyExistsException e) {            e.printStackTrace();        }        room.setId(2);        room.setNumber(1103);        room.setRoomType(RoomType.SUIT);        try {            roomService.saveRoom(room);        } catch (ResourceAlreadyExistsException e) {            e.printStackTrace();        }        roomService.findAll().stream().forEach(System.out::println);    }    @Test    public void findById(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.DOUBLE);        try {            roomService.saveRoom(room);            Room roomServiceById = roomService.findById(1);            Assertions.assertEquals(room.getId(),roomServiceById.getId());            Assertions.assertEquals(room.getNumber(),roomServiceById.getNumber());            Assertions.assertEquals(room.getRoomType(),roomServiceById.getRoomType());            System.out.println(roomServiceById);        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }    @Test    public void updateRoom(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.DOUBLE);        try {            roomService.saveRoom(room);            System.out.println("Before Update: \n"+room);            room.setRoomType(RoomType.SINGLE);            Room updateRoom = roomService.updateRoom(room.getId(), room);            System.out.println("After update: \n"+updateRoom);            Assertions.assertEquals(room.getRoomType(),updateRoom.getRoomType());        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }    @Test    public void deleteById(){        Room room = new Room();        room.setId(1);        room.setNumber(1101);        room.setRoomType(RoomType.DOUBLE);        try {            roomService.saveRoom(room);        } catch (ResourceAlreadyExistsException e) {            e.printStackTrace();        }        room.setId(2);        room.setNumber(1103);        room.setRoomType(RoomType.SUIT);        try {            roomService.saveRoom(room);            roomService.findAll().stream().forEach(System.out::println);            System.out.println("After delete room 2");            roomService.deleteRoomById(2);            roomService.findAll().stream().forEach(System.out::println);        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }    @Test    public void findRoomByTypeTest(){        try {            Room room = new Room();            room.setId(1);            room.setNumber(1101);            room.setRoomType(RoomType.DOUBLE);            roomService.saveRoom(room);            room.setId(2);            room.setNumber(1102);            room.setRoomType(RoomType.SINGLE);            roomService.saveRoom(room);            roomService.findAll()                    .stream()                    .forEach(System.out::println);            System.out.println("show all DOUBLE type rooms :");            roomService.findRoomByType(RoomType.DOUBLE)                    .stream()                    .forEach(System.out::println);        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }    @Test    public void findRoomByNumberTest(){        try {            Room room = new Room();            room.setId(1);            room.setNumber(1101);            room.setRoomType(RoomType.DOUBLE);            roomService.saveRoom(room);            room.setId(2);            room.setNumber(1102);            room.setRoomType(RoomType.SINGLE);            roomService.saveRoom(room);            roomService.findAll()                    .stream()                    .forEach(System.out::println);            System.out.println("Show room number 1101 details:");            System.out.println(roomService.findRoomByNumber(1101));        } catch (ResourceAlreadyExistsException | ResourceNotExistsException e) {            e.printStackTrace();        }    }}